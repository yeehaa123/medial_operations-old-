class SessionDecorator < ApplicationDecorator
  decorates :session

  def date
    if model.start_time
      "Date: #{ model.start_time.strftime("%A, %B %d") }"
    end
  end

  def time
    if model.start_time
      "Time: #{ session.start_time.strftime("%H:%M") } - #{ session.end_time.strftime("%H:%M") }"
    end
  end

  def location
    if model.location
      "Location: #{ session.location }"
    end
  end

  def to_s
    "#{ model.number } - #{ model.title.titleize }"
  end


  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, attributes["created_at"].strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end
end
