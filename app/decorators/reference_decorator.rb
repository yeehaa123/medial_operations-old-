class ReferenceDecorator < ApplicationDecorator
  decorates :reference

  def authors
    s = ""
    model.authors.each_with_index do |a, i|
      if i == 0
        s += "#{ a }"
      else 
        s += " and #{ a.full_name }"
      end
    end
    return s
  end

  def title 
    if model.title
      "#{ model.title.titleize }"
    end
  end

  def publisher
    if model.publisher
      "#{ model.publisher }"
    end
  end

  def year
    if model.date
      "#{ model.date.strftime("%Y") }"
    end
  end

  def medium
    if model.medium
      "#{ model.medium.capitalize }"
    end
  end

  def to_s
    s =  "#{ authors }. "
    s += "#{ title }. "
    s += "#{ publisher }. "
    s += "#{ year }. " 
    s += "#{ medium }."
  end

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, attributes["created_at"].strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end
end
